"use client";
import { useEffect, useState } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { getSubmissionById } from "../../../services/submissionService";
import "./KetQuaBaiLam.css";

function KetQuaBaiLam() {
  const searchParams = useSearchParams();
  const id = searchParams.get("id");
  const router = useRouter();

  const [result, setResult] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchApi = async () => {
      try {
        const data = await getSubmissionById(id);
        setResult(data);
        console.log("API tr·∫£ v·ªÅ:", data);
      } catch (error) {
        console.error("Error fetching submission:", error);
      } finally {
        setLoading(false);
      }
    };
    if (id) fetchApi();
  }, [id]);

  const formatDuration = (start, end) => {
    const diffMs = new Date(end) - new Date(start);
    const minutes = Math.floor(diffMs / 60000);
    const seconds = Math.floor((diffMs % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };

  const formatDate = (dateString) =>
    new Date(dateString).toLocaleString("vi-VN", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });

  if (loading) {
    return (
      <div className="result-container">
        <div className="loading">
          <div className="spinner"></div>
          <p>ƒêang t·∫£i k·∫øt qu·∫£...</p>
        </div>
      </div>
    );
  }

  if (!result) {
    return (
      <div className="result-container">
        <div className="error">
          <h2>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</h2>
          <p>Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n</p>
        </div>
      </div>
    );
  }

  const percentage = Math.round((result.score / result.totalQuestions) * 100);

  return (
    <div className="result-container">
      {/* Header */}
      <div className="header1">
        <h1>K·∫øt Qu·∫£ B√†i L√†m</h1>
        <p>Xem chi ti·∫øt k·∫øt qu·∫£ b√†i tr·∫Øc nghi·ªám c·ªßa b·∫°n</p>
      </div>

      {/* ƒêi·ªÉm */}
      <div className="score-section">
        <div
          className={`score-circle ${percentage >= 80 ? "excellent" : percentage >= 60 ? "good" : "poor"
            }`}
        >
          {result.score}/{result.totalQuestions}
        </div>
        <div className="score-text">
          {percentage >= 80
            ? "Xu·∫•t s·∫Øc!"
            : percentage >= 60
              ? "Kh√° t·ªët!"
              : "C·∫ßn c·ªë g·∫Øng th√™m!"}
        </div>
        <div className="score-percentage">{percentage}%</div>
      </div>

      {/* Th√¥ng tin chung */}
      <div className="info-grid">
        <div className="info-card">
          üìö <div className="info-label">Ch·ªß ƒë·ªÅ</div>
          <div className="info-value">{result.topicTitle || "N/A"}</div>
        </div>
        <div className="info-card">
          ‚è±Ô∏è <div className="info-label">Th·ªùi gian</div>
          <div className="info-value">
            {formatDuration(result.startedAt, result.submittedAt)}
          </div>
        </div>
        <div className="info-card">
          ‚ùì <div className="info-label">S·ªë c√¢u h·ªèi</div>
          <div className="info-value">{result.totalQuestions}</div>
        </div>
        <div className="info-card">
          üìÖ <div className="info-label">Ng√†y l√†m</div>
          <div className="info-value">V√†o {formatDate(result.submittedAt)}</div>
        </div>
      </div>

      {/* C√¢u tr·∫£ l·ªùi chi ti·∫øt */}
      <div className="answers-section">
        <h2>üìù Chi ti·∫øt c√¢u tr·∫£ l·ªùi</h2>
        {result.questions?.length ? (
          result.questions.map((q, i) => {
            const isCorrect = q.isCorrect;

            return (
              <div
                key={q._id || i}
                className={`answer-item ${isCorrect ? "correct" : "incorrect"}`}
              >
                <div className="answer-header">
                  <span>C√¢u {i + 1}</span>
                  <span className={`badge ${isCorrect ? "ok" : "fail"}`}>
                    {isCorrect ? "‚úÖ ƒê√∫ng" : "‚ùå Sai"}
                  </span>
                </div>

                {/* C√¢u h·ªèi */}
                <div className="question-text">{q.question}</div>

                {/* ƒê√°p √°n */}
                <div className="options">
                  {q.answers?.map((opt) => {
                    const selected = q.selectedAnswer === opt.key;
                    const correct = q.correctAnswer === opt.key;

                    return (
                      <div
                        key={opt._id}
                        className={`option ${correct
                          ? "correct-option"
                          : selected && !correct
                            ? "wrong-option"
                            : ""
                          }`}
                      >
                        <b>{opt.key}.</b> {opt.text}
                        {/* Hi·ªÉn th·ªã icon ‚úÖ ‚ùå */}
                        {correct && <span className="icon">‚úÖ</span>}
                        {selected && !correct && <span className="icon">‚ùå</span>}
                      </div>
                    );
                  })}
                </div>
              </div>
            );
          })
        ) : (
          <p>Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt</p>
        )}
      </div>

      {/* N√∫t h√†nh ƒë·ªông */}
      <div className="actions">
        {/* <button onClick={() => router.push(`/Question?id=${result.topicId}`)}> */}
        <button
          onClick={() => {
            if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën l√†m l·∫°i b√†i n√†y kh√¥ng?\n\nL∆∞u √Ω: C√¢u h·ªèi c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi ho·∫∑c kh√¥ng c√≤n.")) {
              router.push(`/Question?id=${result.topicId}`);
            }
          }}
        >
          üîÑ L√†m l·∫°i
        </button>
        <button onClick={() => router.push("/")}>üè† V·ªÅ trang ch·ªß</button>
      </div>
    </div>
  );
}

export default KetQuaBaiLam;
